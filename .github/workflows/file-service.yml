name: E-Commerce File Service CI/CD

on:
  push:
    branches: [ "main" ]
    paths:
      - 'file-service/**'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Make gradlew executable
        run: chmod +x ./file-service/gradlew
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build
          build-root-directory: file-service
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./file-service
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/file_service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Docker Pull & Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST1 }}
          username: ${{ secrets.AWS_EC2_USER1 }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY1 }}
          envs: GITHUB_SHA
          script: |
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/file_service:latest
            docker stop file_service
            docker rm file_service
            docker run -d --name file_service --env SPRING.JWT.TOKEN=${{ secrets.JWT_TOKEN }} --env AWS.ACCESS.KEY=${{ secrets.AWS_ACCESS_KEY }} --env AWS.SECRET.KEY=${{ secrets.AWS_SECRET_KEY }} --env AWS.S3.BUCKET=${{ secrets.AWS_S3_BUCKET }} --env SERVICE.IP=${{ secrets.SERVICE_IP }} -p 8083:8080 --restart unless-stopped ${{ secrets.DOCKERHUB_USERNAME }}/file_service:latest